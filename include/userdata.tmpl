$route53_zone_id = "${public_r53_domain_id}"
$route53_zone_name = "${public_r53_domain}".TrimEnd('.')
$domain_name = "${domain_name}"

function ConnectToDomain() {
	$domain = (Get-WmiObject -Class Win32_ComputerSystem).Domain
	$newDomain = "${domain_name}"
	$ad_user = "${ad_user}"
	$newDomainPassword = '${domain_password}' # single quotes because password can contain dollar sign
	if ( ([string]::Compare($newDomain, $domain, $True) -ne 0) ) {
	  $connect = (Get-WmiObject -Class Win32_ComputerSystem).JoinDomainOrWorkGroup($newDomain,$newDomainPassword,"$ad_user@$newDomain",$null,3).ReturnValue
	  if ($connect -eq 0 ) {
			Restart-Computer
			Start-Sleep -s 30
	  }
	}
}

net user administrator ${local_password}
$azs = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/meta-data/placement/availability-zone).Trim()
$az = $azs.substring($azs.length -1,1)

if ( $az -eq "a") { $newname = "rdgw1" }

if ( $az -eq "b") { $newname = "rdgw2" }

if ( $az -eq "c") { $newname = "rdgw3" }

if ( ([string]::Compare($newName, $env:computerName, $True) -ne 0) ) {
	$rename = (Get-WmiObject -Class Win32_ComputerSystem).Rename($newName,"${local_password}",'Administrator').ReturnValue
  if ($rename -eq 0) {
    Restart-Computer
    Start-Sleep -s 30
  }

	} else {

	Set-DefaultAWSRegion -Region "${region}"
  start-sleep -s 30
	Import-Module NetAdapter
	$alias = (Get-NetAdapter).Name
	Set-DnsClientServerAddress -InterfaceAlias $alias -ServerAddress "${dns_servers}"
	ConnectToDomain
}

#Create Cert, install Cert to My, install Cert to Root, Export Cert as pfx
Function GenerateSelfSignedCert{
    Param (
            $certcn,
            $password,
            $certfilepath
           )    
        
    #Check if the certificate name was used before
    $thumbprintA=(dir cert:\localmachine\My -recurse | where {$_.Subject -match "CN=" + $certcn} | Select-Object -Last 1).thumbprint
    if ($thumbprintA.Length -gt 0)
    {
    Write-Host "Cert already exists" -ForegroundColor Cyan

    }
    else
    {
    $thumbprintA=New-SelfSignedCertificate -DnsName $certcn -CertStoreLocation cert:\LocalMachine\My |ForEach-Object{ $_.Thumbprint}
    }
            $message = $certcn + " installed into LocalMachine\My successfully with thumprint "+$thumbprintA
            Write-Host $message -ForegroundColor Cyan
            Write-Host "Exporting Certificate as .pfx file" -ForegroundColor Cyan
            certutil -f -exportPFX -p $password my $thumbprintA $certfilepath
            Write-Host "Importing Certificate to LocalMachine\Root" -ForegroundColor Cyan
            certutil -f -p $password -importpfx $certfilepath
            Write-Host "Import successful." -ForegroundColor Cyan
 }

 function Set-RdsGwCertificate {
    [cmdletbinding(DefaultParameterSetName='Thumbprint')]
    param (
        [Parameter(Mandatory, ParameterSetName='CertHash', ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [byte[]]$CertHash,
        
        [Parameter(Mandatory, ParameterSetName='Thumbprint', ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [String] $Thumbprint
    )
    process {
        if ($PSCmdlet.ParameterSetName -eq 'Thumbprint') {
            if ($Cert = Get-Item -Path  Cert:\LocalMachine\My\$Thumbprint -ErrorAction SilentlyContinue) {
                $CertHash = $Cert.GetCertHash()
            } else {
                throw ('Certificate matching thumbprint {0} was not found' -f $Thumbprint)
            }
        }
        
        #remove current SSL configuration if exists and restart
        if (Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\HTTP\Parameters\SslBindingInfo\0.0.0.0:443 -Name SslCertHash -ErrorAction SilentlyContinue) {
            Remove-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\HTTP\Parameters\SslBindingInfo\0.0.0.0:443 -Name SslCertHash
            Restart-Service -Name TSGateway -Force
        }
        
        $SSLConfigure = Get-CimInstance -Namespace root/CIMV2/TerminalServices -ClassName Win32_TSGatewayServerSettings | 
            Invoke-CimMethod -MethodName SetCertificate -Arguments @{CertHash = $CertHash}
        if ($SSLConfigure.ReturnValue -ne 0) {
            throw ('Failed assigning generated Certificate. Returnvalue: {0}' -f $SSLConfigure.ReturnValue)
        }
        $SSLACLConfigure = Get-CimInstance -Namespace root/CIMV2/TerminalServices -ClassName Win32_TSGatewayServerSettings | 
            Invoke-CimMethod -MethodName SetCertificateACL -Arguments @{CertHash = $CertHash}
        if ($SSLACLConfigure.ReturnValue -ne 0) {
            throw ('Failed assigning ACL to generated Certificate. Returnvalue: {0}' -f $SSLACLConfigure.ReturnValue)
        }
        $SSLContextConfigure = Get-CimInstance -Namespace root/CIMV2/TerminalServices -ClassName Win32_TSGatewayServerSettings | 
            Invoke-CimMethod -MethodName RefreshCertContext -Arguments @{CertHash = $CertHash}
        if ($SSLContextConfigure.ReturnValue -ne 0) {
            throw ('Failed refreshing context for generated Certificate. Returnvalue: {0}' -f $SSLContextConfigure.ReturnValue)
        }
    }
}

function win-features {
[string[]]$features = @("rds-gateway","rsat-rds-tools")
if ((get-windowsfeature -name $features).installstate -eq "Installed") {
  write-host "Roles already installed"
}
else { install-windowsfeature $features -IncludeManagementtools -IncludeAllSubFeature}
}

function rapcap-policies {
Import-module -name remotedesktopservices
$ad_user = "${ad_user}"
$domain_name = "${domain_name}"
$rappolicy = "defaultrap"
$cappolicy = "defaultcap"
if ($ad_user -eq "admin") {
    if (-not(test-path "RDS:\GatewayServer\RAP\$rappolicy")){new-item -Path RDS:\GatewayServer\RAP -Name $rappolicy -UserGroups "admins@$domain_name" -ComputerGroupType 2}
    if (-not(test-path "RDS:\GatewayServer\CAP\$cappolicy")){new-item -path RDS:\GatewayServer\CAP -Name $cappolicy -UserGroups "admins@$domain_name" -AuthMethod 1}
    }


else {
      if (-not(test-path "RDS:\GatewayServer\RAP\$rappolicy")){new-item -Path RDS:\GatewayServer\RAP -Name $rappolicy -UserGroups "domain admins@$domain_name" -ComputerGroupType 2}
      if (-not(test-path "RDS:\GatewayServer\CAP\$cappolicy")){new-item -path RDS:\GatewayServer\CAP -Name $cappolicy -UserGroups "domain admins@$domain_name" -AuthMethod 1}
    }
}

function Disable-InternetExplorerESC {
   $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
   $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
   Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0 -Force
   Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0 -Force
   Stop-Process -Name Explorer -Force
   Write-Host "IE Enhanced Security Configuration (ESC) has been disabled." -ForegroundColor Green
}

function Disable-UserAccessControl {
   Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 00000000 -Force
   Write-Host "User Access Control (UAC) has been disabled." -ForegroundColor Green
}

netsh advfirewall set allprofiles state off

function r53-record-update {
$route53_zone_id = "${public_r53_domain_id}"
$route53_zone_name = "${public_r53_domain}".TrimEnd('.')
$ipAddress = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/meta-data/public-ipv4)
$HostName = "$env:COMPUTERNAME.$route53_zone_name"
$record = new-object Amazon.Route53.Model.ResourceRecord
$record.Value = $ipAddress

$rs = New-Object Amazon.Route53.Model.ResourceRecordSet
$rs.Name = $HostName
$rs.Type = "A"
$rs.TTL = "10"
$rs.ResourceRecords = $record

$change = new-object Amazon.Route53.Model.Change
$change.Action = 'UPSERT'
$change.ResourceRecordSet = $rs

Edit-R53ResourceRecordSet -HostedZoneId $route53_zone_id -ChangeBatch_Change $change
}

$certlocation = "c:\$env:COMPUTERNAME-cert.pfx"
GenerateSelfSignedCert -certcn "$env:COMPUTERNAME.$route53_zone_name" -password "${pfx_pw}" -certfilepath $certlocation
Write-S3Object -BucketName "${certificate_bucket_id}" -Key "$env:COMPUTERNAME-$domain_name-cert.pfx" -File $certlocation -Force
win-features
$thumb = (Get-ChildItem Cert:\localmachine\My | Where-Object subject -like *"$env:COMPUTERNAME.$route53_zone_name"*).Thumbprint
Set-RdsGwCertificate -Thumbprint $thumb
rapcap-policies
Disable-UserAccessControl
Disable-InternetExplorerESC
r53-record-update

